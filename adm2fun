!/bin/bash

#adm1 - CREAR BACKUP"
#adm2 - RESTAURAR BACKUP"
#adm3 - LIMPIAR CACHE"
#adm4 - ALTERAR SEÑA ROOT"
#adm5 - INFO DE CPU"
#adm6 - STATUS DE RED"
#adm7 - TEST DE VELOCIDAD"
#adm8 - ATUALIZAR PAKETES"
#adm9 - REINICIAR SERVICIOS VPS"
#adm10 - REINICIAR VPS (REBOOT)"

#------------------------------------------------------------#

function_backup () {
IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
IP2=$(wget -qO- ipv4.icanhazip.com)
if [[ "$IP" != "$IP2" ]]; then
IP="$IP2"
fi
if [ ! -d /var ]; then
mkdir /var
fi
if [ ! -d /var/www ]; then
mkdir /var/www
fi
if [ ! -d /var/www/html ]; then
mkdir /var/www/html
fi
if [ ! -d /var/www/html/backup ]; then
mkdir /var/www/html/backup
fi
chmod -R 755 /var/www
val="$1"
cp /root/$val /var/www/html/backup/$val
echo ""
echo -e "\033[1;31mO LINK PARA BACKUP, USE ESTE LINK NA VPS QUE DESEA RESTAURAR O BACKUP"
echo -e "\033[1;36mhttp://$IP:81/backup/$val
ou
http://$IP:81/html/backup/$val
\033[0m"
}

if [ "$1" = "adm1" ]; then
cat /etc/passwd |grep -v ovpn > /tmp/ussh
echo -e "\033[1;37mFazendo Backup de Usuarios... [SSH], usuarios openvpn nao entrarao nessa lista!\033[0m"
if [ -e /root/adm-backup ]; then
rm -rf /root/adm-backup
fi
touch /root/adm-backup
for user in `awk -F : '$3 > 900 { print $1 }' /tmp/ussh |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do
echo -e "\033[1;32mFazendo Backup do Usuário\033[1;31m
$user \033[0m"
 if [ -e /etc/adm/usuarios/$user ]; then
pass=$(cat /etc/adm/usuarios/$user | grep "senha" | awk '{print $2}')
data=$(cat /etc/adm/usuarios/$user | grep "data" | awk '{print $2}')
limit=$(cat /etc/adm/usuarios/$user | grep "limite" | awk '{print $2}')
echo "$user $pass $limit $data" >> /root/adm-backup
else
echo "$user admmanager" >> /root/adm-backup
 fi
done
echo "admpro" >> /root/adm-backup
echo -e "\033[1;31mBackup Completo !!!\033[0m"
echo " "
 if [ -e /etc/apache2/apache2.conf ]; then
echo -e "\033[1;31mFoi Identificado ServidorWEB Em Sua Vps, Deseja Disponibilizar esse backup Online?\033[0m"
while true; do
read -p "[s/n]: " bkup
case $bkup in
(s|S)
function_backup adm-backup
break
;;
(N|n)
break
;;
*)
echo "Selecione 1 opção"
;;
esac
done
 fi
echo -e "\033[1;37mAS informações sobre usuarios ficam no arquivo \033[1;31m /root/adm-backup \033[1;37m
Guarde os Para uma futura Restauração\033[0m"
read -p "enter"
exit
fi


#------------------------------------------------------------#

if [ "$1" = "adm2" ]; then
echo -e "\033[1;31mDigite o Local do arquivo Backup ou Digite o Link Para o Backup
Ex:\033[1;36m http://www.meubackup.com/backup \033[1;31m
ou \033[1;36m
/root/backup-adm \033[1;31m"
read -p "[Arquivo/Link]: " arq
 if [ ! -e "$arq" ]; then
cd /root
wget -O backup-adm $arq
  if [ ! -e "/root/backup-adm" ]; then
echo -e "\033[1;31mNao Foi Encontrado Backup no link!"
sleep 5s
exit
  fi
test=$(cat /root/backup-adm | egrep -o "admpro")
  if [ "$test" = "" ]; then
echo "Esse Backup e incompatível com o admpro"
sleep 5s
exit
  fi
bkp="/root/backup-adm"
else
test=$(cat $arq | egrep -o "admpro")
  if [ "$test" = "" ]; then
echo "Esse Backup e incompatível com o adm"
sleep 5s
exit
  fi
bkp="$arq"
 fi
echo -e "\033[1;37mRestaurando...\033[0m"
num="1"
while true; do
sed -n $num' p;' $bkp | awk '{print $1,$2,$3,$4}' > /etc/adm/wqe
fim=$(cat /etc/adm/wqe | egrep -o "admpro")
 if [ "$fim" != "" ]; then
rm -rf /etc/adm/wqe
break
 fi
usuario=$(cat /etc/adm/wqe | awk '{print $1}')
senha=$(cat /etc/adm/wqe |awk '{print $2}')
limite=$(cat /etc/adm/wqe |awk '{print $3}')
data=$(cat /etc/adm/wqe |awk '{print $4}')
valid=$(date '+%C%y-%m-%d' -d " +30 days")
datexp=$(date "+%d/%m/%Y" -d " +30 days")
 if [ "$data" = "" ]; then
data="$valid"
echo -e "\033[1;31mUsuario: $usuario
Foi Definido a data $datexp"
 fi
 if [ "$limite" = "" ]; then
limite="2"
 fi
useradd -M -s /bin/false $usuario -e $data
(echo $senha; echo $senha) | passwd $usuario 2>/dev/null
echo -e "\033[1;34m---------------------------------"
sleep 2s
echo -e "\033[1;32m$usuario Restaurado!\033[0m"
echo -e "Usuario: $usuario"
echo -e "Senha: $senha"
echo -e "Loguins: $limite"
echo -e "Data: $data"
echo ""
 if [ -e /etc/adm/usuarios/$usuario ]; then
rm -rf /etc/adm/usuarios/$usuario
 fi
touch /etc/adm/usuarios/$usuario
echo "senha: $senha" >> /etc/adm/usuarios/$usuario
echo "limite: $limite" >> /etc/adm/usuarios/$usuario
echo "data: $data" >> /etc/adm/usuarios/$usuario
rm -rf /etc/adm/wqe
num=$(($num + 1))
done
echo -e "\033[1;34m---------------------------------\033[0m"
echo -e "\033[1;31mTodos Usuarios Foram Restaurados!"
rm -rf $bkp
fi

#------------------------------------------------------------#

if [ "$1" = "adm3" ]; then
echo -e "\033[1;33mEsta Ferramenta Limpara O Cache Do Sistema, E Tambem Ira Fazer Uma Limpeza Geral Em Sua Maquina, Eliminado Coisas Inuteis...\033[1;31m
Para Limpar O Cache De Um Enter!\033[0m"
read -p ""
echo -e "\033[1;31mLimpando O Cache E Swap...\033[0m"
echo -e "\033[1;31m"
echo 3 > /proc/sys/vm/drop_caches
sysctl -w vm.drop_caches=3 1>/dev/null 2>/dev/null
swapoff -a && swapon -a 1>/dev/null 2>/dev/null
cd /tmp/ && rm -rf *
apt-get clean -y
apt-get autoremove -y
cd /root/
echo -e "\033[1;31mAguarde...\033[0m"
echo -e "\033[7;31m\033[7;41m"
for prog in $(seq 10);
do
echo -n "||"
sleep 0.1s
echo -n "|"
sleep 0.1s
done
echo ""
sleep 1s
echo -e "\033[0m\033[1;31mLimpo\033[0m"
service ssh restart 1>/dev/null 2>/dev/null
service squid restart 1>/dev/null 2>/dev/null
service squid3 restart 1>/dev/null 2>/dev/null
exit
fi

#------------------------------------------------------------#

if [ "$1" = "adm4" ]; then
echo -e "ATENCAO!
Esta Ferramenta Ira Modificar A Senha padrão de loguin Do Usuário ROOT"
read -p "Digite a Nova Senha: " senha
(echo $senha ; echo $senha) | passwd
echo -e "Senha Alterada para: $senha"
exit
fi


#------------------------------------------------------------#

if [ "$1" = "adm5" ]; then
echo -e "\033[1;33mVerificando Sistema...\033[0m"
clear
echo -e "\033[1;33m"
sleep 1s
if [ ! /proc/cpuinfo ]
then
echo "Error Getting System Information."
exit 0
fi
if [ ! /etc/issue.net ]
then
echo "Error Getting System Information."
exit 0
fi
if [ ! /proc/meminfo ]
then
echo "Error Getting System Information."
exit 0
fi
system=$(cat /etc/issue.net)
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
if [ "$system" ]
then
echo "System: $system"
else
echo "System: Not Available"
fi
if [ "$based" ]
then
echo "Its a $based-like"
else
echo "Based system not Available"
fi
if [ "$processor" ]
then
echo "Processor: $processor x$cpus"
else
echo "Processor: Not Available"
fi
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
if [ "$clock" ]
then
echo "Clock: $clock MHz"
else
echo "Clock: Not Available"
fi
echo "$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf "CPU Usage: " "%.2f" "%%", sum}')"
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$( cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
echo "RAM TOTAL: $(($totalram / 1024))MB USED: $(($usedram / 1024))MB FREE: $(($freeram / 1024))MB SWAP: $(($swapram / 1024))MB "
echo "Uptime: $(uptime)"
echo "Hostname: $(hostname)"
echo "IP: $(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
echo "Kernel Version: $(uname -r)"
echo "Architecture: $(uname -m)"
echo -e "\033[0m"
exit
fi

#------------------------------------------------------------#

if [ "$1" = "adm6" ]; then
clear
nload
sleep 1s
exit
fi

#------------------------------------------------------------#

if [ "$1" = "adm7" ]; then
clear
echo -e "\033[1;31mCarregando...\033[0m"
ping=$(ping -c1 google.com |awk '{print $8 $9}' |grep -v loss |cut -d = -f2 |sed ':a;N;s/\n//g;ta')
echo "Ping: $ping"
velo=$(speedtest.py |grep load:)
echo "$velo"
sleep 1s
exit
fi
 

#------------------------------------------------------------#


if [ "$1" = "adm8" ]; then
echo -e "\033[1;32mAtualizando Pacotes\033[1;31m"
sleep 1s
apt-get update -y
sleep 1s
apt-get upgrade -y
sleep 1s
apt-get dist-update -y
sleep 1s
apt-get dist-upgrade -y
sleep 1s
apt-get install ca-certificates -y
echo -e "\033[1;32mAtualizado!\033[0m"
fi

#------------------------------------------------------------#


if [ "$1" = "adm9" ]; then
echo -e "Recarregando Todos Serviços Vps!"
s1=$(ps aux | egrep -o "ssh")
s2=$(ps aux | egrep -o "sshd")
s5=$(ps aux | egrep -o "openvpn")
if [ "$s1" != "" ]; then
service ssh restart
/etc/init.d/ssh restart
fi
if [ "$s2" != "" ]; then
service sshd restart
/etc/init.d/sshd restart
fi
if [ -e /etc/squid/squid.conf ]; then
service squid restart
/etc/init.d/squid restart
fi
if [ -e /etc/squid3/squid.conf ]; then
service squid3 restart
/etc/init.d/squid3 restart
fi
if [ -e /etc/default/dropbear ]; then
service dropbear restart
/etc/init.d/dropbear restart
fi
if [ "$s5" != "" ]; then
service openvpn restart
/etc/init.d/openvpn restart
systemctl restart openvpn@server.service
systemctl enable openvpn@server.service
chkconfig openvpn on
systemctl restart openvpn@server.service
fi
fi

#------------------------------------------------------------#

if [ "$1" = "adm10" ]; then
echo -e "Preparando Para Reiniciar VPS"
sleep 1s
reboot
sleep 1s
reboot
reboot
reboot
reboot
reboot
exit
fi

#------------------------------------------------------------#

sleep 2s
exitt